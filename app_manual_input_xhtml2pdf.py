
import streamlit as st
import pandas as pd
import jinja2
from xhtml2pdf import pisa
import tempfile
import os

# Embutir a r√©gua de diagn√≥stico
regua = pd.DataFrame([
    {"S√©rie": "6¬∫ Ano", "Quest√£o": "Q1", "Alternativa marcada": "A", "N√≠vel de conhecimento do estudante": "Avan√ßado", "Poss√≠vel causa do erro": "Alternativa correta", "Estrat√©gia de interven√ß√£o": "Propor novas leituras de HQs visuais e atividades de an√°lise de imagem.", "Habilidades necess√°rias (BNCC)": "EF06LP12"},
    {"S√©rie": "6¬∫ Ano", "Quest√£o": "Q1", "Alternativa marcada": "B", "N√≠vel de conhecimento do estudante": "Intermedi√°rio", "Poss√≠vel causa do erro": "Leitura incompleta do enunciado", "Estrat√©gia de interven√ß√£o": "Trabalhar leitura de imagens, interpreta√ß√£o de cenas.", "Habilidades necess√°rias (BNCC)": "EF06LP12"},
    {"S√©rie": "6¬∫ Ano", "Quest√£o": "Q1", "Alternativa marcada": "C", "N√≠vel de conhecimento do estudante": "B√°sico", "Poss√≠vel causa do erro": "Confus√£o entre texto verbal e n√£o verbal", "Estrat√©gia de interven√ß√£o": "Comparar tirinhas com e sem texto verbal", "Habilidades necess√°rias (BNCC)": "EF06LP12"},
    {"S√©rie": "6¬∫ Ano", "Quest√£o": "Q1", "Alternativa marcada": "D", "N√≠vel de conhecimento do estudante": "Muito b√°sico / Inicial", "Poss√≠vel causa do erro": "Dificuldade em reconhecer sequ√™ncia narrativa", "Estrat√©gia de interven√ß√£o": "Explorar sequ√™ncia de eventos visuais", "Habilidades necess√°rias (BNCC)": "EF06LP12"},
    {"S√©rie": "6¬∫ Ano", "Quest√£o": "Q2", "Alternativa marcada": "A", "N√≠vel de conhecimento do estudante": "Avan√ßado", "Poss√≠vel causa do erro": "Alternativa correta", "Estrat√©gia de interven√ß√£o": "Ampliar com produ√ß√µes de receitas.", "Habilidades necess√°rias (BNCC)": "EF05LP18"},
    {"S√©rie": "6¬∫ Ano", "Quest√£o": "Q3", "Alternativa marcada": "B", "N√≠vel de conhecimento do estudante": "Avan√ßado", "Poss√≠vel causa do erro": "Alternativa correta", "Estrat√©gia de interven√ß√£o": "", "Habilidades necess√°rias (BNCC)": "EF05LP15"},
    {"S√©rie": "6¬∫ Ano", "Quest√£o": "Q4", "Alternativa marcada": "D", "N√≠vel de conhecimento do estudante": "Avan√ßado", "Poss√≠vel causa do erro": "Alternativa correta", "Estrat√©gia de interven√ß√£o": "", "Habilidades necess√°rias (BNCC)": "EF05LP16"},
    {"S√©rie": "6¬∫ Ano", "Quest√£o": "Q5", "Alternativa marcada": "B", "N√≠vel de conhecimento do estudante": "Avan√ßado", "Poss√≠vel causa do erro": "Alternativa correta", "Estrat√©gia de interven√ß√£o": "", "Habilidades necess√°rias (BNCC)": "EF05LP17"},
])

def classificar_nivel(percentual):
    if percentual >= 85: return "Avan√ßado"
    elif percentual >= 65: return "Intermedi√°rio"
    elif percentual >= 40: return "B√°sico"
    return "Muito b√°sico / Requer apoio"

def classificar_habilidade(h):
    if pd.isna(h): return "Outros"
    if h.startswith("EF06LP") or h.startswith("EF67LP") or h.startswith("EF05LP"):
        return "Leitura e interpreta√ß√£o de texto"
    return "Outros"

def gerar_resumo(nivel, habilidades):
    dom = ", ".join(sorted(set(map(classificar_habilidade, habilidades))))
    if nivel == "Avan√ßado":
        return f"O aluno demonstra dom√≠nio em {dom}, estando apto a acompanhar a turma."
    elif nivel == "Intermedi√°rio":
        return f"O aluno apresenta desempenho satisfat√≥rio em {dom}, com condi√ß√µes de acompanhar a turma, mas precisa de refor√ßo em pontos espec√≠ficos."
    elif nivel == "B√°sico":
        return f"O aluno tem conhecimentos iniciais em {dom}, sendo necess√°rio um acompanhamento mais pr√≥ximo e atividades de refor√ßo."
    else:
        return f"O aluno apresenta dificuldades significativas nas compet√™ncias avaliadas. Ser√° necess√°rio um plano individual de apoio focado em {dom}."

st.set_page_config("Diagn√≥stico Individual")
st.title("üìò Gerador de Relat√≥rio Diagn√≥stico")

nome = st.text_input("Nome do aluno")
turma = st.selectbox("S√©rie", ["6¬∫ Ano"])
respostas = {}

st.markdown("### üìù Respostas do aluno")
for q in ["Q1", "Q2", "Q3", "Q4", "Q5"]:
    respostas[q] = st.radio(f"{q} - Marque a alternativa:", ["A", "B", "C", "D"], key=q)

if st.button("üìÑ Gerar Relat√≥rio PDF"):
    total = 0
    acertos = 0
    habilidades = []
    niveis = []
    estrategias = []

    for q, resp in respostas.items():
        entrada = regua[
            (regua["S√©rie"] == turma) &
            (regua["Quest√£o"] == q) &
            (regua["Alternativa marcada"] == resp)
        ]
        if not entrada.empty:
            total += 1
            e = entrada.iloc[0]
            nivel = e["N√≠vel de conhecimento do estudante"]
            if "avan√ßado" in nivel.lower() or e["Poss√≠vel causa do erro"].lower() == "alternativa correta":
                acertos += 1
            niveis.append(nivel)
            habilidades.append(e["Habilidades necess√°rias (BNCC)"])
            if pd.notna(e["Estrat√©gia de interven√ß√£o"]) and nivel.lower() != "avan√ßado":
                estrategias.append(e["Estrat√©gia de interven√ß√£o"])

    percentual = (acertos / total) * 100 if total else 0
    nivel_geral = classificar_nivel(percentual)
    resumo = gerar_resumo(nivel_geral, habilidades)
    pontos_atencao = ", ".join(sorted(set(
        classificar_habilidade(h) for i, h in enumerate(habilidades)
        if "b√°sico" in niveis[i].lower() or "muito" in niveis[i].lower()
    )))
    estrategias_texto = " | ".join(sorted(set(estrategias)))

    template_loader = jinja2.FileSystemLoader(searchpath=".")
    template_env = jinja2.Environment(loader=template_loader)
    template = template_env.get_template("relatorio_template.html")

    html_rendered = template.render(
        nome=nome,
        turma=turma,
        total_acertos=acertos,
        percentual_acertos=f"{percentual:.1f}%",
        nivel_geral=nivel_geral,
        resumo_pedagogico=resumo,
        pontos_atencao=pontos_atencao,
        estrategias=estrategias_texto
    )

    temp_pdf = tempfile.NamedTemporaryFile(delete=False, suffix=".pdf")
    with open(temp_pdf.name, "w+b") as pdf_file:
        pisa.CreatePDF(html_rendered, dest=pdf_file)

    with open(temp_pdf.name, "rb") as f:
        st.download_button("üì• Baixar PDF do Relat√≥rio", f, file_name=f"{nome}_relatorio.pdf")
