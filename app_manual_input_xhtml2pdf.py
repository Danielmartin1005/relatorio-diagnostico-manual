
import streamlit as st
import pandas as pd
import tempfile
from io import BytesIO
from xhtml2pdf import pisa
from PIL import Image
import base64
from jinja2 import Environment, FileSystemLoader
import os

st.set_page_config(page_title="Relat√≥rio Diagn√≥stico", layout="centered")
st.title("üìà Relat√≥rio Diagn√≥stico Personalizado")
st.markdown("Preencha os dados abaixo e envie os arquivos para gerar o relat√≥rio individual com base na r√©gua de an√°lise diagn√≥stica.")

# Upload de CSV da r√©gua
regua_file = st.file_uploader("üìÑ Envie o arquivo CSV da r√©gua diagn√≥stica", type="csv")

# Upload do logotipo da escola
logo_file = st.file_uploader("üè´ (Opcional) Envie o logotipo da escola", type=["png", "jpg", "jpeg"])

# Campos do aluno
nome = st.text_input("Nome do aluno")
turma = st.text_input("Turma")
st.markdown("### üìå Digite as respostas do aluno para as quest√µes:")
respostas_dict = {}
for i in range(1, 21):
    respostas_dict[f"Q{i}"] = st.text_input(f"Q{i}", max_chars=1)

if st.button("üì§ Gerar Relat√≥rio"):
    if not nome or not turma:
        st.warning("Por favor, preencha nome e turma.")
    elif not regua_file:
        st.warning("Envie o arquivo CSV da r√©gua diagn√≥stica.")
    else:
        regua_df = pd.read_csv(regua_file, dtype=str).fillna("")

        respostas_aluno = {k.upper(): v.strip().upper() for k, v in respostas_dict.items() if v.strip()}
        total_questoes = 0
        acertos = 0
        habilidades_domina = []
        habilidades_atencao = []
        estrategias = []

        for questao, resposta in respostas_aluno.items():
            linha_regua = regua_df[
                (regua_df["S√©rie"].str.strip().str.lower() == turma.strip().lower()) &
                (regua_df["Quest√£o"].str.strip().str.upper() == questao.upper()) &
                (regua_df["Alternativa marcada"].str.strip().str.upper() == resposta)
            ]
            if not linha_regua.empty:
                total_questoes += 1
                nivel = linha_regua["N√≠vel de conhecimento do estudante"].values[0]
                habilidade = linha_regua["Habilidades necess√°rias (BNCC)"].values[0]
                causa = linha_regua["Poss√≠vel causa do erro"].values[0]
                estrategia = linha_regua["Estrat√©gia de interven√ß√£o"].values[0]

                if "avan√ßado" in nivel.lower() or "correta" in causa.lower():
                    acertos += 1
                    habilidades_domina.append(habilidade)
                else:
                    habilidades_atencao.append(habilidade)
                    if estrategia:
                        estrategias.append(estrategia)

        desempenho = round((acertos / total_questoes) * 100, 1) if total_questoes else 0

        def classificar_nivel(p):
            if p >= 85: return "Avan√ßado"
            if p >= 65: return "Intermedi√°rio"
            if p >= 40: return "B√°sico"
            return "Muito b√°sico / Requer apoio"

        nivel_conhecimento = classificar_nivel(desempenho)
        habilidades_domina = sorted(set(habilidades_domina))
        habilidades_atencao = sorted(set(habilidades_atencao))
        estrategias = sorted(set(estrategias))

        # Gerar resumo
        if nivel_conhecimento == "Avan√ßado":
            resumo = "O aluno demonstra dom√≠nio nas habilidades avaliadas e est√° apto a acompanhar a turma com seguran√ßa."
        elif nivel_conhecimento == "Intermedi√°rio":
            resumo = "O aluno apresenta desempenho satisfat√≥rio, mas pode se beneficiar de refor√ßos pontuais nas habilidades destacadas."
        elif nivel_conhecimento == "B√°sico":
            resumo = "O aluno tem conhecimentos iniciais e precisar√° de acompanhamento em diversas habilidades."
        else:
            resumo = "O aluno apresenta dificuldades significativas e necessita de um plano individualizado de apoio."

        # LOGOTIPO
        logo_base64 = ""
        if logo_file:
            image = Image.open(logo_file)
            buffered = BytesIO()
            image.save(buffered, format="PNG")
            logo_base64 = base64.b64encode(buffered.getvalue()).decode()

        # Renderizar HTML com Jinja2
        env = Environment(loader=FileSystemLoader(os.path.dirname(__file__)))
        template = env.get_template("relatorio_template.html")
        html_rendered = template.render(
            nome=nome,
            turma=turma,
            acertos=acertos,
            desempenho=desempenho,
            nivel_conhecimento=nivel_conhecimento,
            resumo_pedagogico=resumo,
            habilidades_domina=habilidades_domina,
            habilidades_atencao=habilidades_atencao,
            logo_base64=logo_base64
        )

        with tempfile.NamedTemporaryFile(delete=False, suffix=".pdf") as pdf_file:
            pisa.CreatePDF(BytesIO(html_rendered.encode("utf-8")), dest=pdf_file)
            st.success("‚úÖ Relat√≥rio gerado com sucesso!")
            with open(pdf_file.name, "rb") as f:
                st.download_button("üì• Baixar PDF", f.read(), file_name=f"relatorio_{nome}.pdf", mime="application/pdf")
